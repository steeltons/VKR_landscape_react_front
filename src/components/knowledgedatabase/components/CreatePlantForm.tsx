import {
  Box, Button, Grid, MenuItem, TextField, Typography, InputLabel, Select, FormControl,
} from '@mui/material';
import { useState } from 'react';
import { createPlant, CreatePlantRqDto } from '../../../services/plants';
import { uploadImageFile } from '../../../services/images';

type Props = {
  onCancel: () => void;
};

const climates = ['—É–º–µ—Ä–µ–Ω–Ω—ã–π', '—Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π', '—Å—É–±—Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π', '–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π'];
const temperatures = Array.from({ length: 61 }, (_, i) => -20 + i); // –æ—Ç -20¬∞C –¥–æ +40¬∞C

const CreatePlantForm = ({ onCancel }: Props) => {
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [isFeed, setIsFeed] = useState('–î–∞');
  const [needsSun, setNeedsSun] = useState('–î–∞');
  const [isAnnual, setIsAnnual] = useState('–ù–µ—Ç');
  const [climate, setClimate] = useState('—É–º–µ—Ä–µ–Ω–Ω—ã–π');
  const [minTemp, setMinTemp] = useState('15');
  const [maxTemp, setMaxTemp] = useState('20');
  const [imagePreviews, setImagePreviews] = useState<string[]>([]);
  const [imageFiles, setImageFiles] = useState<File[]>([]);

  const handleSubmit = () => {
    const file: File = imageFiles[0];
    const plantRqDto : CreatePlantRqDto = {
        plant_name: name,
        plant_description: description,
    }

    const upload = async () => {
        const fileId: number = await uploadImageFile(file);
        plantRqDto.plant_picture_id = fileId;

        const result = await createPlant(plantRqDto);
        console.log(result)
    }
    upload();
    
  };

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || []);
    const newPreviews = files.map(file => URL.createObjectURL(file));
    setImageFiles(prev => [...prev, ...files]);
    setImagePreviews(prev => [...prev, ...newPreviews]);
  };

  const handleRemoveImage = (index: number) => {
    const updatedFiles = [...imageFiles];
    const updatedPreviews = [...imagePreviews];
    updatedFiles.splice(index, 1);
    updatedPreviews.splice(index, 1);
    setImageFiles(updatedFiles);
    setImagePreviews(updatedPreviews);
  };

  return (
    <Box sx={{ p: 3 }}>
      <Button variant="outlined" onClick={onCancel} sx={{ mb: 2 }}>
        ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞—Å—Ç–µ–Ω–∏—è–º
      </Button>
      <Typography variant="h5" gutterBottom>
        ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
      </Typography>

      <Grid container spacing={2}>
        <Grid item xs={12}>
          <TextField fullWidth label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è" value={name} onChange={(e) => setName(e.target.value)} />
        </Grid>
        <Grid item xs={12}>
          <TextField
            fullWidth
            label="–û–ø–∏—Å–∞–Ω–∏–µ"
            multiline
            rows={3}
            value={description}
            onChange={(e) => setDescription(e.target.value)}
          />
        </Grid>

        <Grid item xs={12}>
          <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>
            <label htmlFor="upload-image">
              <input
                accept="image/*"
                id="upload-image"
                type="file"
                multiple
                style={{ display: 'none' }}
                onChange={handleImageUpload}
              />
              <Button variant="text" component="span">
                üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              </Button>
            </label>

            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 3, mt: 2 }}>
              {imagePreviews.map((preview, index) => (
                <Box key={index} sx={{ position: 'relative', display: 'inline-block'}}>
                  <img
                    src={preview}
                    alt={`preview-${index}`}
                    style={{
                        width: 150,
                        height: 150,
                        objectFit: 'cover',
                        borderRadius: 4,
                        border: '1px solid #ccc'
                    }}
                  />
                  <Button
                    onClick={() => handleRemoveImage(index)}
                    size="small"
                    sx={{
                      position: 'absolute',
                      bottom: 4,
                      right: 0,
                      minWidth: '24px',
                      height: '24px',
                      fontSize: '16px',
                      lineHeight: 1,
                      borderRadius: '50%',
                      backgroundColor: '#f44336',
                      color: 'white',
                      '&:hover': {
                        backgroundColor: '#d32f2f',
                      },
                    }}
                  >
                    √ó
                  </Button>
                </Box>
              ))}
            </Box>
          </Box>
        </Grid>

        <Grid item xs={12} sm={4}>
          <FormControl fullWidth>
            <InputLabel>–Ø–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä–º–æ–≤—ã–º</InputLabel>
            <Select value={isFeed} label="–Ø–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä–º–æ–≤—ã–º" onChange={(e) => setIsFeed(e.target.value)}>
              <MenuItem value="–î–∞">–î–∞</MenuItem>
              <MenuItem value="–ù–µ—Ç">–ù–µ—Ç</MenuItem>
            </Select>
          </FormControl>
        </Grid>

        <Grid item xs={12} sm={4}>
          <FormControl fullWidth>
            <InputLabel>–ù—É–∂–µ–Ω —Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç</InputLabel>
            <Select value={needsSun} label="–ù—É–∂–µ–Ω —Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç" onChange={(e) => setNeedsSun(e.target.value)}>
              <MenuItem value="–î–∞">–î–∞</MenuItem>
              <MenuItem value="–ù–µ—Ç">–ù–µ—Ç</MenuItem>
            </Select>
          </FormControl>
        </Grid>

        <Grid item xs={12} sm={4}>
          <FormControl fullWidth>
            <InputLabel>–û–¥–Ω–æ–ª–µ—Ç–Ω–µ–µ</InputLabel>
            <Select value={isAnnual} label="–û–¥–Ω–æ–ª–µ—Ç–Ω–µ–µ" onChange={(e) => setIsAnnual(e.target.value)}>
              <MenuItem value="–î–∞">–î–∞</MenuItem>
              <MenuItem value="–ù–µ—Ç">–ù–µ—Ç</MenuItem>
            </Select>
          </FormControl>
        </Grid>

        <Grid item xs={12} sm={4}>
          <FormControl fullWidth>
            <InputLabel>–ö–ª–∏–º–∞—Ç</InputLabel>
            <Select value={climate} label="–ö–ª–∏–º–∞—Ç" onChange={(e) => setClimate(e.target.value)}>
              {climates.map((c) => (
                <MenuItem key={c} value={c}>{c}</MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>

        <Grid item xs={6} sm={4}>
          <FormControl fullWidth>
            <InputLabel>–ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</InputLabel>
            <Select value={minTemp} label="–ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞" onChange={(e) => setMinTemp(e.target.value)}>
              {temperatures.map((t) => (
                <MenuItem key={t} value={t}>{t} ‚ÑÉ</MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>

        <Grid item xs={6} sm={4}>
          <FormControl fullWidth>
            <InputLabel>–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</InputLabel>
            <Select value={maxTemp} label="–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞" onChange={(e) => setMaxTemp(e.target.value)}>
              {temperatures.map((t) => (
                <MenuItem key={t} value={t}>{t} ‚ÑÉ</MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>

        <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2 }}>
          <Button variant="outlined" onClick={onCancel}>
            ‚ùå –ö —Ä–∞—Å—Ç–µ–Ω–∏—è–º
          </Button>
          <Button variant="contained" color="success" onClick={handleSubmit}>
            üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
        </Grid>
      </Grid>
    </Box>
  );
};

export default CreatePlantForm;
